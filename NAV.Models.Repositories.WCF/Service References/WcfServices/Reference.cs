//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.488
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace NAV.Models.Repositories.WCF.WcfServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServices.IWCFServices")]
    public interface IWCFServices {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFServices/ProxyGetConfiguration", ReplyAction="http://tempuri.org/IWCFServices/ProxyGetConfigurationResponse")]
        System.IAsyncResult BeginProxyGetConfiguration(ref string xmlData, System.AsyncCallback callback, object asyncState);
        
        bool EndProxyGetConfiguration(ref string xmlData, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFServices/ProxyGetCustomerList", ReplyAction="http://tempuri.org/IWCFServices/ProxyGetCustomerListResponse")]
        System.IAsyncResult BeginProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.AsyncCallback callback, object asyncState);
        
        bool EndProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFServices/ProxyValidateLoginCredentials", ReplyAction="http://tempuri.org/IWCFServices/ProxyValidateLoginCredentialsResponse")]
        System.IAsyncResult BeginProxyValidateLoginCredentials(ref string authToken, string domain, string userName, string securePassword, System.AsyncCallback callback, object asyncState);
        
        bool EndProxyValidateLoginCredentials(ref string authToken, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFServices/ProxySaveCustomer", ReplyAction="http://tempuri.org/IWCFServices/ProxySaveCustomerResponse")]
        System.IAsyncResult BeginProxySaveCustomer(ref string authToken, string xmlData, System.AsyncCallback callback, object asyncState);
        
        bool EndProxySaveCustomer(ref string authToken, System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServicesChannel : NAV.Models.Repositories.WCF.WcfServices.IWCFServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyGetConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProxyGetConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string xmlData {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyGetCustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProxyGetCustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string authToken {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string xmlData {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string xmlFilters {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyValidateLoginCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProxyValidateLoginCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string authToken {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxySaveCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProxySaveCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string authToken {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFServicesClient : System.ServiceModel.ClientBase<NAV.Models.Repositories.WCF.WcfServices.IWCFServices>, NAV.Models.Repositories.WCF.WcfServices.IWCFServices {
        
        private BeginOperationDelegate onBeginProxyGetConfigurationDelegate;
        
        private EndOperationDelegate onEndProxyGetConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onProxyGetConfigurationCompletedDelegate;
        
        private BeginOperationDelegate onBeginProxyGetCustomerListDelegate;
        
        private EndOperationDelegate onEndProxyGetCustomerListDelegate;
        
        private System.Threading.SendOrPostCallback onProxyGetCustomerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginProxyValidateLoginCredentialsDelegate;
        
        private EndOperationDelegate onEndProxyValidateLoginCredentialsDelegate;
        
        private System.Threading.SendOrPostCallback onProxyValidateLoginCredentialsCompletedDelegate;
        
        private BeginOperationDelegate onBeginProxySaveCustomerDelegate;
        
        private EndOperationDelegate onEndProxySaveCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onProxySaveCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFServicesClient() {
        }
        
        public WCFServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ProxyGetConfigurationCompletedEventArgs> ProxyGetConfigurationCompleted;
        
        public event System.EventHandler<ProxyGetCustomerListCompletedEventArgs> ProxyGetCustomerListCompleted;
        
        public event System.EventHandler<ProxyValidateLoginCredentialsCompletedEventArgs> ProxyValidateLoginCredentialsCompleted;
        
        public event System.EventHandler<ProxySaveCustomerCompletedEventArgs> ProxySaveCustomerCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NAV.Models.Repositories.WCF.WcfServices.IWCFServices.BeginProxyGetConfiguration(ref string xmlData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProxyGetConfiguration(ref xmlData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NAV.Models.Repositories.WCF.WcfServices.IWCFServices.EndProxyGetConfiguration(ref string xmlData, System.IAsyncResult result) {
            return base.Channel.EndProxyGetConfiguration(ref xmlData, result);
        }
        
        private System.IAsyncResult OnBeginProxyGetConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string xmlData = ((string)(inValues[0]));
            return ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).BeginProxyGetConfiguration(ref xmlData, callback, asyncState);
        }
        
        private object[] OnEndProxyGetConfiguration(System.IAsyncResult result) {
            string xmlData = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).EndProxyGetConfiguration(ref xmlData, result);
            return new object[] {
                    xmlData,
                    retVal};
        }
        
        private void OnProxyGetConfigurationCompleted(object state) {
            if ((this.ProxyGetConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProxyGetConfigurationCompleted(this, new ProxyGetConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProxyGetConfigurationAsync(string xmlData) {
            this.ProxyGetConfigurationAsync(xmlData, null);
        }
        
        public void ProxyGetConfigurationAsync(string xmlData, object userState) {
            if ((this.onBeginProxyGetConfigurationDelegate == null)) {
                this.onBeginProxyGetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginProxyGetConfiguration);
            }
            if ((this.onEndProxyGetConfigurationDelegate == null)) {
                this.onEndProxyGetConfigurationDelegate = new EndOperationDelegate(this.OnEndProxyGetConfiguration);
            }
            if ((this.onProxyGetConfigurationCompletedDelegate == null)) {
                this.onProxyGetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProxyGetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginProxyGetConfigurationDelegate, new object[] {
                        xmlData}, this.onEndProxyGetConfigurationDelegate, this.onProxyGetConfigurationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NAV.Models.Repositories.WCF.WcfServices.IWCFServices.BeginProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProxyGetCustomerList(ref authToken, ref xmlData, ref xmlFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NAV.Models.Repositories.WCF.WcfServices.IWCFServices.EndProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.IAsyncResult result) {
            return base.Channel.EndProxyGetCustomerList(ref authToken, ref xmlData, ref xmlFilters, result);
        }
        
        private System.IAsyncResult OnBeginProxyGetCustomerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string xmlData = ((string)(inValues[1]));
            string xmlFilters = ((string)(inValues[2]));
            return ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).BeginProxyGetCustomerList(ref authToken, ref xmlData, ref xmlFilters, callback, asyncState);
        }
        
        private object[] OnEndProxyGetCustomerList(System.IAsyncResult result) {
            string authToken = this.GetDefaultValueForInitialization<string>();
            string xmlData = this.GetDefaultValueForInitialization<string>();
            string xmlFilters = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).EndProxyGetCustomerList(ref authToken, ref xmlData, ref xmlFilters, result);
            return new object[] {
                    authToken,
                    xmlData,
                    xmlFilters,
                    retVal};
        }
        
        private void OnProxyGetCustomerListCompleted(object state) {
            if ((this.ProxyGetCustomerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProxyGetCustomerListCompleted(this, new ProxyGetCustomerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProxyGetCustomerListAsync(string authToken, string xmlData, string xmlFilters) {
            this.ProxyGetCustomerListAsync(authToken, xmlData, xmlFilters, null);
        }
        
        public void ProxyGetCustomerListAsync(string authToken, string xmlData, string xmlFilters, object userState) {
            if ((this.onBeginProxyGetCustomerListDelegate == null)) {
                this.onBeginProxyGetCustomerListDelegate = new BeginOperationDelegate(this.OnBeginProxyGetCustomerList);
            }
            if ((this.onEndProxyGetCustomerListDelegate == null)) {
                this.onEndProxyGetCustomerListDelegate = new EndOperationDelegate(this.OnEndProxyGetCustomerList);
            }
            if ((this.onProxyGetCustomerListCompletedDelegate == null)) {
                this.onProxyGetCustomerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProxyGetCustomerListCompleted);
            }
            base.InvokeAsync(this.onBeginProxyGetCustomerListDelegate, new object[] {
                        authToken,
                        xmlData,
                        xmlFilters}, this.onEndProxyGetCustomerListDelegate, this.onProxyGetCustomerListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NAV.Models.Repositories.WCF.WcfServices.IWCFServices.BeginProxyValidateLoginCredentials(ref string authToken, string domain, string userName, string securePassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProxyValidateLoginCredentials(ref authToken, domain, userName, securePassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NAV.Models.Repositories.WCF.WcfServices.IWCFServices.EndProxyValidateLoginCredentials(ref string authToken, System.IAsyncResult result) {
            return base.Channel.EndProxyValidateLoginCredentials(ref authToken, result);
        }
        
        private System.IAsyncResult OnBeginProxyValidateLoginCredentials(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string domain = ((string)(inValues[1]));
            string userName = ((string)(inValues[2]));
            string securePassword = ((string)(inValues[3]));
            return ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).BeginProxyValidateLoginCredentials(ref authToken, domain, userName, securePassword, callback, asyncState);
        }
        
        private object[] OnEndProxyValidateLoginCredentials(System.IAsyncResult result) {
            string authToken = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).EndProxyValidateLoginCredentials(ref authToken, result);
            return new object[] {
                    authToken,
                    retVal};
        }
        
        private void OnProxyValidateLoginCredentialsCompleted(object state) {
            if ((this.ProxyValidateLoginCredentialsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProxyValidateLoginCredentialsCompleted(this, new ProxyValidateLoginCredentialsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProxyValidateLoginCredentialsAsync(string authToken, string domain, string userName, string securePassword) {
            this.ProxyValidateLoginCredentialsAsync(authToken, domain, userName, securePassword, null);
        }
        
        public void ProxyValidateLoginCredentialsAsync(string authToken, string domain, string userName, string securePassword, object userState) {
            if ((this.onBeginProxyValidateLoginCredentialsDelegate == null)) {
                this.onBeginProxyValidateLoginCredentialsDelegate = new BeginOperationDelegate(this.OnBeginProxyValidateLoginCredentials);
            }
            if ((this.onEndProxyValidateLoginCredentialsDelegate == null)) {
                this.onEndProxyValidateLoginCredentialsDelegate = new EndOperationDelegate(this.OnEndProxyValidateLoginCredentials);
            }
            if ((this.onProxyValidateLoginCredentialsCompletedDelegate == null)) {
                this.onProxyValidateLoginCredentialsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProxyValidateLoginCredentialsCompleted);
            }
            base.InvokeAsync(this.onBeginProxyValidateLoginCredentialsDelegate, new object[] {
                        authToken,
                        domain,
                        userName,
                        securePassword}, this.onEndProxyValidateLoginCredentialsDelegate, this.onProxyValidateLoginCredentialsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult NAV.Models.Repositories.WCF.WcfServices.IWCFServices.BeginProxySaveCustomer(ref string authToken, string xmlData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProxySaveCustomer(ref authToken, xmlData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool NAV.Models.Repositories.WCF.WcfServices.IWCFServices.EndProxySaveCustomer(ref string authToken, System.IAsyncResult result) {
            return base.Channel.EndProxySaveCustomer(ref authToken, result);
        }
        
        private System.IAsyncResult OnBeginProxySaveCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authToken = ((string)(inValues[0]));
            string xmlData = ((string)(inValues[1]));
            return ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).BeginProxySaveCustomer(ref authToken, xmlData, callback, asyncState);
        }
        
        private object[] OnEndProxySaveCustomer(System.IAsyncResult result) {
            string authToken = this.GetDefaultValueForInitialization<string>();
            bool retVal = ((NAV.Models.Repositories.WCF.WcfServices.IWCFServices)(this)).EndProxySaveCustomer(ref authToken, result);
            return new object[] {
                    authToken,
                    retVal};
        }
        
        private void OnProxySaveCustomerCompleted(object state) {
            if ((this.ProxySaveCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProxySaveCustomerCompleted(this, new ProxySaveCustomerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProxySaveCustomerAsync(string authToken, string xmlData) {
            this.ProxySaveCustomerAsync(authToken, xmlData, null);
        }
        
        public void ProxySaveCustomerAsync(string authToken, string xmlData, object userState) {
            if ((this.onBeginProxySaveCustomerDelegate == null)) {
                this.onBeginProxySaveCustomerDelegate = new BeginOperationDelegate(this.OnBeginProxySaveCustomer);
            }
            if ((this.onEndProxySaveCustomerDelegate == null)) {
                this.onEndProxySaveCustomerDelegate = new EndOperationDelegate(this.OnEndProxySaveCustomer);
            }
            if ((this.onProxySaveCustomerCompletedDelegate == null)) {
                this.onProxySaveCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProxySaveCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginProxySaveCustomerDelegate, new object[] {
                        authToken,
                        xmlData}, this.onEndProxySaveCustomerDelegate, this.onProxySaveCustomerCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override NAV.Models.Repositories.WCF.WcfServices.IWCFServices CreateChannel() {
            return new WCFServicesClientChannel(this);
        }
        
        private class WCFServicesClientChannel : ChannelBase<NAV.Models.Repositories.WCF.WcfServices.IWCFServices>, NAV.Models.Repositories.WCF.WcfServices.IWCFServices {
            
            public WCFServicesClientChannel(System.ServiceModel.ClientBase<NAV.Models.Repositories.WCF.WcfServices.IWCFServices> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginProxyGetConfiguration(ref string xmlData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = xmlData;
                System.IAsyncResult _result = base.BeginInvoke("ProxyGetConfiguration", _args, callback, asyncState);
                xmlData = ((string)(_args[0]));
                return _result;
            }
            
            public bool EndProxyGetConfiguration(ref string xmlData, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = xmlData;
                bool _result = ((bool)(base.EndInvoke("ProxyGetConfiguration", _args, result)));
                xmlData = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = authToken;
                _args[1] = xmlData;
                _args[2] = xmlFilters;
                System.IAsyncResult _result = base.BeginInvoke("ProxyGetCustomerList", _args, callback, asyncState);
                authToken = ((string)(_args[0]));
                xmlData = ((string)(_args[1]));
                xmlFilters = ((string)(_args[2]));
                return _result;
            }
            
            public bool EndProxyGetCustomerList(ref string authToken, ref string xmlData, ref string xmlFilters, System.IAsyncResult result) {
                object[] _args = new object[3];
                _args[0] = authToken;
                _args[1] = xmlData;
                _args[2] = xmlFilters;
                bool _result = ((bool)(base.EndInvoke("ProxyGetCustomerList", _args, result)));
                authToken = ((string)(_args[0]));
                xmlData = ((string)(_args[1]));
                xmlFilters = ((string)(_args[2]));
                return _result;
            }
            
            public System.IAsyncResult BeginProxyValidateLoginCredentials(ref string authToken, string domain, string userName, string securePassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = authToken;
                _args[1] = domain;
                _args[2] = userName;
                _args[3] = securePassword;
                System.IAsyncResult _result = base.BeginInvoke("ProxyValidateLoginCredentials", _args, callback, asyncState);
                authToken = ((string)(_args[0]));
                return _result;
            }
            
            public bool EndProxyValidateLoginCredentials(ref string authToken, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = authToken;
                bool _result = ((bool)(base.EndInvoke("ProxyValidateLoginCredentials", _args, result)));
                authToken = ((string)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginProxySaveCustomer(ref string authToken, string xmlData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = authToken;
                _args[1] = xmlData;
                System.IAsyncResult _result = base.BeginInvoke("ProxySaveCustomer", _args, callback, asyncState);
                authToken = ((string)(_args[0]));
                return _result;
            }
            
            public bool EndProxySaveCustomer(ref string authToken, System.IAsyncResult result) {
                object[] _args = new object[1];
                _args[0] = authToken;
                bool _result = ((bool)(base.EndInvoke("ProxySaveCustomer", _args, result)));
                authToken = ((string)(_args[0]));
                return _result;
            }
        }
    }
}
